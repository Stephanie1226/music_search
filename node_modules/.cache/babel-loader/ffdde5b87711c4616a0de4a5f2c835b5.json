{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux'; // const mapStateToProps = (state) => ({\n//   songInfo: state.pcardInfo.pcard_info\n// });\n\nfunction RelatedInfo(ckeckedInfo, songInfo) {\n  const [albumRelated, setAlbumRelated] = useState({});\n\n  if (ckeckedInfo.same_album) {\n    // console.log(songInfo.album)\n    // console.log(`/samealbum/${songInfo.album}`)\n    fetch(`/samealbum/${songInfo.album}`).then(response => response.json()).then(data => {\n      setAlbumRelated(data); // const albumRelated = JSON.parse(JSON.stringify(data));\n\n      console.log(albumRelated);\n    });\n  } // else {\n  //     const albumRelated = {};\n  // };\n\n\n  if (ckeckedInfo.this_artiste) {\n    // console.log(songInfo.artist)\n    // console.log(`/sameartist/${songInfo.artist}`)\n    fetch(`/sameartist/${songInfo.artist}`).then(response => response.json()).then(data => {\n      const artisteRelated = JSON.parse(JSON.stringify(data));\n      console.log(artisteRelated);\n    });\n  } else {\n    const artisteRelated = {};\n  }\n\n  if (ckeckedInfo.genre) {\n    // console.log(songInfo.genre)\n    // console.log(`/samegenre/${songInfo.genre}`)\n    fetch(`/samegenre/${songInfo.genre}`).then(response => response.json()).then(data => {\n      const genreRelated = JSON.parse(JSON.stringify(data));\n      console.log(genreRelated);\n    });\n  } else {\n    const genreRelated = {};\n  }\n\n  if (ckeckedInfo.era) {\n    // console.log(songInfo.date)\n    // console.log(`/sameera/${songInfo.date}`)\n    fetch(`/sameera/${songInfo.date}`).then(response => response.json()).then(data => {\n      const eraRelated = JSON.parse(JSON.stringify(data));\n      console.log(eraRelated);\n    });\n  } else {\n    const eraRelated = {};\n  }\n\n  if (ckeckedInfo.associate_artisie) {\n    fetch(`/associates/${songInfo.artist}/${songInfo.genre}`).then(response => response.json()).then(data => {\n      const associateRelated = JSON.parse(JSON.stringify(data));\n      console.log(associateRelated);\n    });\n  } else {\n    const associateRelated = {};\n  }\n\n  const combine = albumRelated;\n} // export default connect(mapStateToProps)(pRelatedInfo);\n\n\nexport default RelatedInfo;","map":{"version":3,"sources":["/Users/Stephanie/Desktop/music_search/src/pages/pop-search-page/RelatedInfo.js"],"names":["React","useState","connect","RelatedInfo","ckeckedInfo","songInfo","albumRelated","setAlbumRelated","same_album","fetch","album","then","response","json","data","console","log","this_artiste","artist","artisteRelated","JSON","parse","stringify","genre","genreRelated","era","date","eraRelated","associate_artisie","associateRelated","combine"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react';\nimport { connect } from 'react-redux';\n\n// const mapStateToProps = (state) => ({\n//   songInfo: state.pcardInfo.pcard_info\n// });\n\nfunction RelatedInfo(ckeckedInfo, songInfo) {\n    const [albumRelated, setAlbumRelated] = useState({});\n\tif (ckeckedInfo.same_album) {\n\t\t// console.log(songInfo.album)\n\t\t// console.log(`/samealbum/${songInfo.album}`)\n\t\tfetch(`/samealbum/${songInfo.album}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n                setAlbumRelated(data)\n    \t\t\t// const albumRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(albumRelated);\n    \t\t}\n    \t);\n\t} \n    // else {\n    //     const albumRelated = {};\n    // };\n\n\tif (ckeckedInfo.this_artiste) {\n\t\t// console.log(songInfo.artist)\n\t\t// console.log(`/sameartist/${songInfo.artist}`)\n\t\tfetch(`/sameartist/${songInfo.artist}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tconst artisteRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(artisteRelated);\n    \t\t}\n    \t);\n\t} else {\n        const artisteRelated = {};\n    }\n\n\tif (ckeckedInfo.genre) {\n\t\t// console.log(songInfo.genre)\n\t\t// console.log(`/samegenre/${songInfo.genre}`)\n\t\tfetch(`/samegenre/${songInfo.genre}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tconst genreRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(genreRelated);\n    \t\t}\n    \t);\n\t} else {\n        const genreRelated = {};\n    }\n\n\tif (ckeckedInfo.era) {\n\t\t// console.log(songInfo.date)\n\t\t// console.log(`/sameera/${songInfo.date}`)\n\t\tfetch(`/sameera/${songInfo.date}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tconst eraRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(eraRelated);\n    \t\t}\n    \t);\n\t} else {\n        const eraRelated = {};\n    }\n\n\tif (ckeckedInfo.associate_artisie) {\n\t\tfetch(`/associates/${songInfo.artist}/${songInfo.genre}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tconst associateRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(associateRelated);\n    \t\t}\n    \t);\n\t} else {\n        const associateRelated = {};\n    }\n\n    const combine = albumRelated;\n}\n\n// export default connect(mapStateToProps)(pRelatedInfo);\nexport default RelatedInfo;\n\n"]},"metadata":{},"sourceType":"module"}