{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  songInfo: state.pcardInfo.pcard_info\n});\n\nfunction RelatedInfo(ckeckedInfo, songInfo) {\n  let albumRelated = {};\n  let artisteRelated = {};\n  let genreRelated = {};\n  let eraRelated = {};\n  let associateRelated = {};\n\n  if (ckeckedInfo.same_album) {\n    // console.log(songInfo.album)\n    // console.log(`/samealbum/${songInfo.album}`)\n    fetch(`/samealbum/${songInfo.album}`).then(response => response.json()).then(data => {\n      albumRelated = JSON.parse(JSON.stringify(data));\n      let set = new Set();\n      const obj = albumRelated.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n      console.log(obj);\n      console.log(albumRelated);\n    });\n  } else {\n    let albumRelated = {};\n  }\n\n  ;\n\n  if (ckeckedInfo.this_artiste) {\n    // console.log(songInfo.artist)\n    // console.log(`/sameartist/${songInfo.artist}`)\n    fetch(`/sameartist/${songInfo.artist}`).then(response => response.json()).then(data => {\n      artisteRelated = JSON.parse(JSON.stringify(data));\n      console.log(artisteRelated);\n    });\n  } else {\n    let artisteRelated = {};\n  }\n\n  if (ckeckedInfo.genre) {\n    // console.log(songInfo.genre)\n    // console.log(`/samegenre/${songInfo.genre}`)\n    fetch(`/samegenre/${songInfo.genre}`).then(response => response.json()).then(data => {\n      genreRelated = JSON.parse(JSON.stringify(data));\n      console.log(genreRelated);\n    });\n  } else {\n    const genreRelated = {};\n  }\n\n  if (ckeckedInfo.era) {\n    // console.log(songInfo.date)\n    // console.log(`/sameera/${songInfo.date}`)\n    fetch(`/sameera/${songInfo.date}`).then(response => response.json()).then(data => {\n      eraRelated = JSON.parse(JSON.stringify(data));\n      console.log(eraRelated);\n    });\n  } else {\n    const eraRelated = {};\n  }\n\n  if (ckeckedInfo.associate_artisie) {\n    fetch(`/associates/${songInfo.artist}/${songInfo.genre}`).then(response => response.json()).then(data => {\n      associateRelated = JSON.parse(JSON.stringify(data));\n      console.log(associateRelated);\n    });\n  } else {\n    const associateRelated = {};\n  }\n\n  console.log(\"start\");\n  let set = new Set(); // const obj = {albumRelated}.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n  // const obj = Object.assign({}, {albumRelated}, {artisteRelated})\n  // console.log(obj)\n\n  console.log(\"end\");\n} // export default connect(mapStateToProps)(pRelatedInfo);\n\n\nexport default RelatedInfo;","map":{"version":3,"sources":["/Users/Stephanie/Desktop/music_search/src/pages/pop-search-page/RelatedInfo.js"],"names":["React","useEffect","connect","mapStateToProps","state","songInfo","pcardInfo","pcard_info","RelatedInfo","ckeckedInfo","albumRelated","artisteRelated","genreRelated","eraRelated","associateRelated","same_album","fetch","album","then","response","json","data","JSON","parse","stringify","set","Set","obj","filter","item","has","name","add","console","log","this_artiste","artist","genre","era","date","associate_artisie"],"mappings":"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","sourcesContent":["import React, { useEffect }  from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => ({\n  songInfo: state.pcardInfo.pcard_info\n});\n\nfunction RelatedInfo(ckeckedInfo, songInfo) {\n    let albumRelated = {};\n    let artisteRelated = {}; \n    let genreRelated = {};\n    let eraRelated = {};\n    let associateRelated = {};\n\n\tif (ckeckedInfo.same_album) {\n\t\t// console.log(songInfo.album)\n\t\t// console.log(`/samealbum/${songInfo.album}`)\n\t\tfetch(`/samealbum/${songInfo.album}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\talbumRelated = JSON.parse(JSON.stringify(data));\n                let set = new Set();\n                const obj = albumRelated.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n                console.log(obj)\n    \t\t\tconsole.log(albumRelated);\n    \t\t}\n    \t);\n\t} \n    else {\n        let albumRelated = {};\n    };\n\n\tif (ckeckedInfo.this_artiste) {\n\t\t// console.log(songInfo.artist)\n\t\t// console.log(`/sameartist/${songInfo.artist}`)\n\t\tfetch(`/sameartist/${songInfo.artist}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tartisteRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(artisteRelated);\n    \t\t}\n    \t);\n\t} else {\n        let artisteRelated = {};\n    }\n\n\tif (ckeckedInfo.genre) {\n\t\t// console.log(songInfo.genre)\n\t\t// console.log(`/samegenre/${songInfo.genre}`)\n\t\tfetch(`/samegenre/${songInfo.genre}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tgenreRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(genreRelated);\n    \t\t}\n    \t);\n\t} else {\n        const genreRelated = {};\n    }\n\n\tif (ckeckedInfo.era) {\n\t\t// console.log(songInfo.date)\n\t\t// console.log(`/sameera/${songInfo.date}`)\n\t\tfetch(`/sameera/${songInfo.date}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\teraRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(eraRelated);\n    \t\t}\n    \t);\n\t} else {\n        const eraRelated = {};\n    }\n\n\tif (ckeckedInfo.associate_artisie) {\n\t\tfetch(`/associates/${songInfo.artist}/${songInfo.genre}`)\n    \t.then(response => response.json())\n    \t.then(data => \n    \t\t{\n    \t\t\tassociateRelated = JSON.parse(JSON.stringify(data));\n    \t\t\tconsole.log(associateRelated);\n    \t\t}\n    \t);\n\t} else {\n        const associateRelated = {};\n    }\n    console.log(\"start\")\n\n    let set = new Set();\n    // const obj = {albumRelated}.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n\n    // const obj = Object.assign({}, {albumRelated}, {artisteRelated})\n    // console.log(obj)\n    console.log(\"end\")\n}\n\n// export default connect(mapStateToProps)(pRelatedInfo);\nexport default RelatedInfo;\n\n"]},"metadata":{},"sourceType":"module"}