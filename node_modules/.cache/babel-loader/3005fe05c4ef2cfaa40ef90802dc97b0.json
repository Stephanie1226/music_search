{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n  songInfo: state.pcardInfo.pcard_info\n});\n\nfunction RelatedInfo(ckeckedInfo, songInfo) {\n  useEffect(() => {\n    this.albumRelated = {};\n    let artisteRelated = {};\n    let genreRelated = {};\n    let eraRelated = {};\n    let associateRelated = {};\n\n    if (ckeckedInfo.same_album) {\n      fetch(`/samealbum/${songInfo.album}`).then(response => response.json()).then(data => {\n        this.albumRelated = JSON.parse(JSON.stringify(data));\n        let set = new Set();\n        const obj = albumRelated.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n        console.log(obj);\n        console.log(albumRelated);\n      });\n    }\n\n    ;\n\n    if (ckeckedInfo.this_artiste) {\n      fetch(`/sameartist/${songInfo.artist}`).then(response => response.json()).then(data => {\n        artisteRelated = JSON.parse(JSON.stringify(data));\n        console.log(artisteRelated);\n      });\n    }\n\n    ;\n\n    if (ckeckedInfo.genre) {\n      fetch(`/samegenre/${songInfo.genre}`).then(response => response.json()).then(data => {\n        genreRelated = JSON.parse(JSON.stringify(data));\n        console.log(genreRelated);\n      });\n    }\n\n    ;\n\n    if (ckeckedInfo.era) {\n      fetch(`/sameera/${songInfo.date}`).then(response => response.json()).then(data => {\n        eraRelated = JSON.parse(JSON.stringify(data));\n        console.log(eraRelated);\n      });\n    }\n\n    ;\n\n    if (ckeckedInfo.associate_artisie) {\n      fetch(`/associates/${songInfo.artist}/${songInfo.genre}`).then(response => response.json()).then(data => {\n        associateRelated = JSON.parse(JSON.stringify(data));\n        console.log(associateRelated);\n      });\n    }\n\n    ;\n  }, []); // if (ckeckedInfo.same_album) {\n  // \t// console.log(songInfo.album)\n  // \t// console.log(`/samealbum/${songInfo.album}`)\n  // \tfetch(`/samealbum/${songInfo.album}`)\n  //    \t.then(response => response.json())\n  //    \t.then(data => \n  //    \t\t{\n  //    \t\t\tlet albumRelated = JSON.parse(JSON.stringify(data));\n  //                let set = new Set();\n  //                const obj = albumRelated.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n  //                console.log(obj)\n  //    \t\t\tconsole.log(albumRelated);\n  //    \t\t}\n  //    \t);\n  // } \n  //    else {\n  //        let albumRelated = {};\n  //    };\n  // if (ckeckedInfo.this_artiste) {\n  // \t// console.log(songInfo.artist)\n  // \t// console.log(`/sameartist/${songInfo.artist}`)\n  // \tfetch(`/sameartist/${songInfo.artist}`)\n  //    \t.then(response => response.json())\n  //    \t.then(data => \n  //    \t\t{\n  //    \t\t\tlet artisteRelated = JSON.parse(JSON.stringify(data));\n  //    \t\t\tconsole.log(artisteRelated);\n  //    \t\t}\n  //    \t);\n  // } else {\n  //        let artisteRelated = {};\n  //    }\n  // if (ckeckedInfo.genre) {\n  // \t// console.log(songInfo.genre)\n  // \t// console.log(`/samegenre/${songInfo.genre}`)\n  // \tfetch(`/samegenre/${songInfo.genre}`)\n  //    \t.then(response => response.json())\n  //    \t.then(data => \n  //    \t\t{\n  //    \t\t\tconst genreRelated = JSON.parse(JSON.stringify(data));\n  //    \t\t\tconsole.log(genreRelated);\n  //    \t\t}\n  //    \t);\n  // } else {\n  //        const genreRelated = {};\n  //    }\n  // if (ckeckedInfo.era) {\n  // \t// console.log(songInfo.date)\n  // \t// console.log(`/sameera/${songInfo.date}`)\n  // \tfetch(`/sameera/${songInfo.date}`)\n  //    \t.then(response => response.json())\n  //    \t.then(data => \n  //    \t\t{\n  //    \t\t\tconst eraRelated = JSON.parse(JSON.stringify(data));\n  //    \t\t\tconsole.log(eraRelated);\n  //    \t\t}\n  //    \t);\n  // } else {\n  //        const eraRelated = {};\n  //    }\n  // if (ckeckedInfo.associate_artisie) {\n  // \tfetch(`/associates/${songInfo.artist}/${songInfo.genre}`)\n  //    \t.then(response => response.json())\n  //    \t.then(data => \n  //    \t\t{\n  //    \t\t\tconst associateRelated = JSON.parse(JSON.stringify(data));\n  //    \t\t\tconsole.log(associateRelated);\n  //    \t\t}\n  //    \t);\n  // } else {\n  //        const associateRelated = {};\n  //    }\n  //    console.log(\"start\")\n  //    let set = new Set();\n  //    // const obj = {albumRelated}.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n  //    // const obj = Object.assign({}, {albumRelated}, {artisteRelated})\n  //    // console.log(obj)\n  //    console.log(\"end\")\n} // export default connect(mapStateToProps)(pRelatedInfo);\n\n\nexport default RelatedInfo;","map":{"version":3,"sources":["/Users/Stephanie/Desktop/music_search/src/pages/pop-search-page/RelatedInfo.js"],"names":["React","useEffect","connect","mapStateToProps","state","songInfo","pcardInfo","pcard_info","RelatedInfo","ckeckedInfo","albumRelated","artisteRelated","genreRelated","eraRelated","associateRelated","same_album","fetch","album","then","response","json","data","JSON","parse","stringify","set","Set","obj","filter","item","has","name","add","console","log","this_artiste","artist","genre","era","date","associate_artisie"],"mappings":"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","sourcesContent":["import React, { useEffect }  from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => ({\n  songInfo: state.pcardInfo.pcard_info\n});\n\nfunction RelatedInfo(ckeckedInfo, songInfo) {\n    useEffect(() => {\n        this.albumRelated = {};\n        let artisteRelated = {}; \n        let genreRelated = {};\n        let eraRelated = {};\n        let associateRelated = {};\n        if (ckeckedInfo.same_album) {\n            fetch(`/samealbum/${songInfo.album}`)\n            .then(response => response.json())\n            .then(data => \n                {\n                    this.albumRelated = JSON.parse(JSON.stringify(data));\n                    let set = new Set();\n                    const obj = albumRelated.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n                    console.log(obj)\n                    console.log(albumRelated);\n                }\n            );\n        };\n\n        if (ckeckedInfo.this_artiste) {\n            fetch(`/sameartist/${songInfo.artist}`)\n            .then(response => response.json())\n            .then(data => \n                {\n                    artisteRelated = JSON.parse(JSON.stringify(data));\n                    console.log(artisteRelated);\n                }\n            );\n        };\n\n        if (ckeckedInfo.genre) {\n            fetch(`/samegenre/${songInfo.genre}`)\n            .then(response => response.json())\n            .then(data => \n                {\n                    genreRelated = JSON.parse(JSON.stringify(data));\n                    console.log(genreRelated);\n                }\n            );\n        };\n\n        if (ckeckedInfo.era) {\n            fetch(`/sameera/${songInfo.date}`)\n            .then(response => response.json())\n            .then(data => \n                {\n                    eraRelated = JSON.parse(JSON.stringify(data));\n                    console.log(eraRelated);\n                }\n            );\n        };\n\n        if (ckeckedInfo.associate_artisie) {\n            fetch(`/associates/${songInfo.artist}/${songInfo.genre}`)\n            .then(response => response.json())\n            .then(data => \n                {\n                    associateRelated = JSON.parse(JSON.stringify(data));\n                    console.log(associateRelated);\n                }\n            );\n        };\n\n\n    }, [])\n\n\t// if (ckeckedInfo.same_album) {\n\t// \t// console.log(songInfo.album)\n\t// \t// console.log(`/samealbum/${songInfo.album}`)\n\t// \tfetch(`/samealbum/${songInfo.album}`)\n //    \t.then(response => response.json())\n //    \t.then(data => \n //    \t\t{\n //    \t\t\tlet albumRelated = JSON.parse(JSON.stringify(data));\n //                let set = new Set();\n //                const obj = albumRelated.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n //                console.log(obj)\n //    \t\t\tconsole.log(albumRelated);\n //    \t\t}\n //    \t);\n\t// } \n //    else {\n //        let albumRelated = {};\n //    };\n\n\t// if (ckeckedInfo.this_artiste) {\n\t// \t// console.log(songInfo.artist)\n\t// \t// console.log(`/sameartist/${songInfo.artist}`)\n\t// \tfetch(`/sameartist/${songInfo.artist}`)\n //    \t.then(response => response.json())\n //    \t.then(data => \n //    \t\t{\n //    \t\t\tlet artisteRelated = JSON.parse(JSON.stringify(data));\n //    \t\t\tconsole.log(artisteRelated);\n //    \t\t}\n //    \t);\n\t// } else {\n //        let artisteRelated = {};\n //    }\n\n\t// if (ckeckedInfo.genre) {\n\t// \t// console.log(songInfo.genre)\n\t// \t// console.log(`/samegenre/${songInfo.genre}`)\n\t// \tfetch(`/samegenre/${songInfo.genre}`)\n //    \t.then(response => response.json())\n //    \t.then(data => \n //    \t\t{\n //    \t\t\tconst genreRelated = JSON.parse(JSON.stringify(data));\n //    \t\t\tconsole.log(genreRelated);\n //    \t\t}\n //    \t);\n\t// } else {\n //        const genreRelated = {};\n //    }\n\n\t// if (ckeckedInfo.era) {\n\t// \t// console.log(songInfo.date)\n\t// \t// console.log(`/sameera/${songInfo.date}`)\n\t// \tfetch(`/sameera/${songInfo.date}`)\n //    \t.then(response => response.json())\n //    \t.then(data => \n //    \t\t{\n //    \t\t\tconst eraRelated = JSON.parse(JSON.stringify(data));\n //    \t\t\tconsole.log(eraRelated);\n //    \t\t}\n //    \t);\n\t// } else {\n //        const eraRelated = {};\n //    }\n\n\t// if (ckeckedInfo.associate_artisie) {\n\t// \tfetch(`/associates/${songInfo.artist}/${songInfo.genre}`)\n //    \t.then(response => response.json())\n //    \t.then(data => \n //    \t\t{\n //    \t\t\tconst associateRelated = JSON.parse(JSON.stringify(data));\n //    \t\t\tconsole.log(associateRelated);\n //    \t\t}\n //    \t);\n\t// } else {\n //        const associateRelated = {};\n //    }\n //    console.log(\"start\")\n\n //    let set = new Set();\n //    // const obj = {albumRelated}.filter(item => !set.has(item.name) ? set.add(item.name) : false);\n\n //    // const obj = Object.assign({}, {albumRelated}, {artisteRelated})\n //    // console.log(obj)\n //    console.log(\"end\")\n}\n\n// export default connect(mapStateToProps)(pRelatedInfo);\nexport default RelatedInfo;\n\n"]},"metadata":{},"sourceType":"module"}